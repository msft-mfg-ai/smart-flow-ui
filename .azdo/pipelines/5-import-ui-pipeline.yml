# ----------------------------------------------------------------------------------------------------
# Pipeline to import container image from remote ACR and push to container app
# ----------------------------------------------------------------------------------------------------
# NOTE: This pipeline expects to find the following variables set in the variable group 
#   (or in the vars/var-dev.yml file) as they are unique secrets:
#   - managedIdentityClientId, appInsightsInstrumentationKey, appInsightsApplicationId, caInstanceLocation
# ----------------------------------------------------------------------------------------------------
# Security: Role assignments needed for the storage account upload: Contributor, Reader, Storage Blob Data Contributor
# ----------------------------------------------------------------------------------------------------
# The blob container must exist or you will get a very strange error like:
#   [error] Storage account: [name] not found. The selected service connection 'Service Principal' supports storage accounts of Azure Resource Manager type only.
# ----------------------------------------------------------------------------------------------------

name: $(date:yyyy).$(date:MM).$(date:dd)$(rev:.r)
trigger:
  - none
  
pool:
  #vmImage: ubuntu-latest
  vmImage: windows-latest   # NOTE: AzureFileCopy@6 will only run on a Windows host...

# ----------------------------------------------------------------------------------------------------
parameters:
  - name: runEnvironment
    displayName: Run commands in
    type: string
    values:
      - DEV
      - PROD
  - name: importIntoAcr
    displayName: Import into Local ACR? (not public)
    type: boolean
    default: false
  - name: deployStorageConfig
    displayName: Deploy Storage Config File?
    type: boolean
    default: true
  - name: deployFromAcr
    displayName: Deploy from Local ACR? (not public)
    type: boolean
    default: true
  - name: deployPublicImage
    displayName: Deploy from Public Image? (not local)
    type: boolean
    default: false
  - name: configFileToDeploy
    displayName: Config File to Deploy
    type: string
    default: 'profileConfig\profiles.json'
  - name: profileContainer
    displayName: Storage Container for Profiles
    type: string
    default: 'profile'

# ----------------------------------------------------------------------------------------------------
variables:
  - group: AI.Doc.Review.Keys
  - template: vars/var-service-connections.yml
  # Bring in environment specific variable files
  - ${{ if eq(lower(parameters.runEnvironment), 'dev') }}:
      - template: vars/var-dev.yml
  - ${{ if eq(lower(parameters.runEnvironment), 'prod') }}:
      - template: vars/var-prod.yml
  - name: sourceAcrName
    value: ghcr.io
  - name: sourceUIImageWithTag
    value: 'msft-mfg-ai/smart-flow-ui/smartflowui:LATEST'
  - name: targetUIImageWithTag
    value: 'smart-flow-ui/smartflowui:LATEST'
  - name: profileContainer
    value: ${{ parameters.profileContainer }}
  - name: configFileToDeploy
    value: ${{ parameters.configFileToDeploy }}

# ----------------------------------------------------------------------------------------------------
jobs:
- job: ImportJob
  displayName: Deploy ${{ parameters.runEnvironment }} objects
  steps:
  - task: PowerShell@2
    name: createVariables
    displayName: Create Variables
    inputs:
      targetType: 'inline'
      script: |
        $environmentNameLower="${{ parameters.runEnvironment }}".ToLower()
          echo "##vso[task.setvariable variable=environmentNameLower]$environmentNameLower"
        $appNameLower="$(appName)".ToLower()
          echo "##vso[task.setvariable variable=appNameLower]$appNameLower"
        $appNameNoDashesLower="$(appName)".ToLower().Replace("-", "")
          echo "##vso[task.setvariable variable=appNameNoDashesLower]$appNameNoDashesLower"

        $resourceGroupName="$(resourceGroupPrefix)-$environmentNameLower".ToLower()
          echo "##vso[task.setvariable variable=resourceGroupName]$resourceGroupName"

        $localContainerRegistryName="$($appNameNoDashesLower)cr$($environmentNameLower)"
          echo "##vso[task.setvariable variable=localContainerRegistryName]$localContainerRegistryName"
        $containerRegistryUrl="$($appNameNoDashesLower)cr$($environmentNameLower).azurecr.io"
          echo "##vso[task.setvariable variable=containerRegistryUrl]$containerRegistryUrl"

        $uiAppName="$($appNameNoDashesLower)-ca-ui-$($environmentNameLower)"
          echo "##vso[task.setvariable variable=uiAppName]$uiAppName"
        $azureOpenAiEndPoint="https://$($appNameNoDashesLower)-cog-$($environmentNameLower).openai.azure.com/"
          echo "##vso[task.setvariable variable=azureOpenAiEndPoint]$azureOpenAiEndPoint"
        $searchServiceEndPoint="https://$($appNameNoDashesLower)-srch-$($environmentNameLower).search.windows.net/"
          echo "##vso[task.setvariable variable=searchServiceEndPoint]$searchServiceEndPoint"
        $cosmosEndpoint="https://$($appNameNoDashesLower)-cosmos-$($environmentNameLower).documents.azure.com:443/"
          echo "##vso[task.setvariable variable=cosmosEndpoint]$cosmosEndpoint"
        $apiEndpoint="https://$($appNameNoDashesLower)-ca-api-$($environmentNameLower).$(caInstanceLocation).azurecontainerapps.io"
          echo "##vso[task.setvariable variable=apiEndpoint]$apiEndpoint"
        $storageAccountName="$($appNameNoDashesLower)st$($environmentNameLower)"
          echo "##vso[task.setvariable variable=storageAccountName]$storageAccountName"
        $storageEndpoint="https://$($appNameNoDashesLower)st$($environmentNameLower).blob.core.windows.net"
          echo "##vso[task.setvariable variable=storageEndpoint]$storageEndpoint"
        $keyVaultUrl="https://$($appNameNoDashesLower)kv$($environmentNameLower).vault.azure.net"
          echo "##vso[task.setvariable variable=keyVaultUrl]$keyVaultUrl"

        $logAnalyticsAppInsightsConnectionString="InstrumentationKey=$appInsightsInstrumentationKey;IngestionEndpoint=https://eastus2-3.in.applicationinsights.azure.com/;LiveEndpoint=https://eastus2.livediagnostics.monitor.azure.com/;ApplicationId=$appInsightsApplicationId"
          echo "##vso[task.setvariable variable=logAnalyticsAppInsightsConnectionString]$logAnalyticsAppInsightsConnectionString"

        $apikeyValue="$keyVaultUrl/secrets/api-key"
          echo "##vso[task.setvariable variable=apikeyValue]$apikeyValue"
        $cosmosKeyValue="$keyVaultUrl/secrets/azure-cosmos-connection-string"
          echo "##vso[task.setvariable variable=cosmosKeyValue]$cosmosKeyValue"
        $aikeyValue="$keyVaultUrl/secrets/cognitive-services-key"
          echo "##vso[task.setvariable variable=aikeyValue]$aikeyValue"
        $searchkeyValue="$keyVaultUrl/secrets/search-key"
          echo "##vso[task.setvariable variable=searchkeyValue]$searchkeyValue"
        $docintellikeyValue="$keyVaultUrl/secrets/form-recognizer-services-key"
          echo "##vso[task.setvariable variable=docintellikeyValue]$docintellikeyValue"

        $AutoBodyDamageAdvisorEndpointValue="$apiEndpoint/api/task/auto-body-damage-analysis"
          echo "##vso[task.setvariable variable=AutoBodyDamageAdvisorEndpointValue]$AutoBodyDamageAdvisorEndpointValue"
        $ColorBlindEndpointValue="$apiEndpoint/api/task/image-review-inline-prompt"
          echo "##vso[task.setvariable variable=ColorBlindEndpointValue]$ColorBlindEndpointValue"

  - task: PowerShell@2
    name: createPublicVariables
    displayName: Create Variables if Public
    condition: ${{ parameters.deployPublicImage }}
    inputs:
      targetType: 'inline'
      script: |
        $containerRegistryUrl="$($sourceAcrName)"
          echo "##vso[task.setvariable variable=containerRegistryUrl]$containerRegistryUrl"

  - task: PowerShell@2
    name: createConfigVariables
    displayName: Create Config Variables
    condition: ${{ parameters.deployStorageConfig }}
    inputs:
      targetType: 'inline'
      script: |
        $profileContainer="profile"
          echo "##vso[task.setvariable variable=profileContainer]$profileContainer"

  - task: PowerShell@2
    displayName: Display Variables
    continueOnError: true
    inputs:
      targetType: 'inline'
      script: |
        echo "Running in Resource Group=$(resourceGroupName)"
        echo "Using Service Connection=$(serviceConnectionName)"

        echo "environmentNameLower=$(environmentNameLower)"
        echo "appNameLower=$(appNameLower)"
        echo "appNameNoDashesLower=$(appNameNoDashesLower)"
        echo "uiAppName=$(uiAppName)"
        echo ""
        echo "source AcrName=$(sourceAcrName)"
        echo "source UIImageWithTag=$(sourceUIImageWithTag)"
        echo "target localContainerRegistryName=$(localContainerRegistryName)"
        echo "targetUIImageWithTag=$(targetUIImageWithTag)"
        echo "deploy from containerRegistryUrl=$(containerRegistryUrl)"
        echo ""
        echo "azureOpenAiEndPoint=$(azureOpenAiEndPoint)"
        echo "searchServiceEndPoint=$(searchServiceEndPoint)"
        echo "cosmosEndpoint=$(cosmosEndpoint)"
        echo "apiEndpoint=$(apiEndpoint)"
        echo "storageAccountName=$(storageAccountName)"
        echo "storageEndpoint=$(storageEndpoint)"
        echo "keyVaultUrl=$(keyVaultUrl)"
        echo "managedIdentityClientId=$(managedIdentityClientId)"
        echo "appInsightsInstrumentationKey=$(appInsightsInstrumentationKey)"
        echo "appInsightsApplicationId=$(appInsightsApplicationId)"
        echo "logAnalyticsAppInsightsConnectionString=$(logAnalyticsAppInsightsConnectionString)"
        echo ""
        echo "apikeyValue=$(apikeyValue)"
        echo "cosmosKeyValue=$(cosmosKeyValue)"
        echo "aikeyValue=$(aikeyValue)"
        echo "searchkeyValue=$(searchkeyValue)"
        echo "docintellikeyValue)=$(docintellikeyValue)"
        echo ""
        echo "profileContainer=$(profileContainer)"
        echo "configFileToDeploy=$(configFileToDeploy)"
        echo "AutoBodyDamageAdvisorEndpointValue=$(AutoBodyDamageAdvisorEndpointValue)"
        echo "ColorBlindEndpointValue=$(ColorBlindEndpointValue)"
        echo ""
        echo "##[group]Display All Environment Variables:"
        printenv | sort
        echo "##[endgroup]"
        echo "----------------------------------------"
        echo "##[group]Directory of pipeline workspace:"
        tree -L 4 $(Pipeline.Workspace)
        echo "##[endgroup]"

  - task: AzureCLI@2
    displayName: Import into ACR
    condition: ${{ parameters.importIntoAcr }}
    inputs:
      AzureSubscription: $(serviceConnectionName)
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        echo "az acr import --name $(localContainerRegistryName) --source $(sourceAcrName)/$(sourceUIImageWithTag) --image $(targetUIImageWithTag) --force"
        echo "Importing image..."
        az acr import --name $(localContainerRegistryName) --source $(sourceAcrName)/$(sourceUIImageWithTag) --image $(targetUIImageWithTag) --force
        echo "Image imported from $(sourceAcrName) into $(localContainerRegistryName)!"

# ----------------------------------------------------------------------------------------------------
# FILE COPY ROUTINES
# ----------------------------------------------------------------------------------------------------
#  # Set-AzStorageBlobContent @myFileBlob
#  #   This request is not authorized to perform this operation. HTTP Status Code: 403 - HTTP 
#  #   Error Message: This request is not authorized to perform this operation. ErrorCode: AuthorizationFailure 
#  - task: AzurePowerShell@5
#    displayName: Copy Profile to Blob Storage via PS
#    condition: ${{ and(parameters.useStorageConfig, or(eq(parameters.blobCopyMethod, 'PS'), eq(parameters.blobCopyMethod, 'ALL'))) }}
#    continueOnError: true
#    inputs:
#      AzureSubscription: $(serviceConnectionName)
#      ScriptType: InlineScript
#      azurePowerShellVersion: LatestVersion
#      pwsh: true
#      Inline: |
#       $context = New-AzStorageContext -StorageAccountName '$(storageAccountName)' -UseConnectedAccount
#       $myFileBlob= @{
#         File             = '$(Build.SourcesDirectory)\$(configFileToDeploy)'
#         Container        = '$(profileContainer)'
#         Blob             = 'profiles.json'
#         Context          = $context
#         StandardBlobTier = 'Hot'
#       }
#       Set-AzStorageBlobContent @myFileBlob
#
#  # I've tried many interations of this, but can't seem to resolve this error... 
#  #   [error] Storage account: [name] not found. The selected service connection 'Service Principal' supports storage accounts of Azure Resource Manager type only.
#  - task: AzureFileCopy@6
#    name: AzureFileCopy
#    displayName: Copy Profile to Blob Storage via Task
#    condition: ${{ and(parameters.useStorageConfig, or(eq(parameters.blobCopyMethod, 'TASK'), eq(parameters.blobCopyMethod, 'ALL'))) }}
#    continueOnError: true
#    inputs:
#      AzureSubscription: $(serviceConnectionName)
#      SourcePath: '$(Build.SourcesDirectory)\$(configFileToDeploy)'
#      storage: $(storageEndpoint)
#      Destination: AzureBlob
#      ContainerName: $(profileContainer)
#      BlobPrefix: ''
#
#  # ERROR: <urllib3.connection.HTTPSConnection object at 0x000001A311FD8950>: 
#  # Failed to establish a new connection: [Errno 11001] getaddrinfo failed
#  # ##[error]Script failed with exit code: 1
  - task: AzureCLI@2
    displayName: Copy Profile to Blob Storage via AZ CLI
    condition: ${{ parameters.deployStorageConfig }}
    #condition: ${{ and(parameters.useStorageConfig, or(eq(parameters.blobCopyMethod, 'AZ'), eq(parameters.blobCopyMethod, 'ALL'))) }}
    continueOnError: true
    inputs:
      AzureSubscription: $(serviceConnectionName)
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        echo "az storage container create --name profile --account-name $(storageAccountName) --auth-mode login"
        az storage container create \
          --name 'profile' \
          --account-name '$(storageAccountName)' \
          --auth-mode login
        echo "az storage blob copy start --source-uri '$(Build.SourcesDirectory)\$(configFileToDeploy)' --account-name $(storageAccountName) --destination-container '$(profileContainer)' --destination-blob 'profiles.json' --auth-mode login"
        az storage blob copy start \
          --source-uri '$(Build.SourcesDirectory)\$(configFileToDeploy)' \
          --account-name $(storageEndpoint) \
          --destination-container '$(profileContainer)' \
          --destination-blob 'profiles.json' \
          --auth-mode login
# ----------------------------------------------------------------------------------------------------
# /END FILE COPY 
# ----------------------------------------------------------------------------------------------------

  - task: AzureCLI@2
    displayName: Update UI CA Image
    condition: ${{ or(parameters.deployFromAcr, parameters.deployPublicImage) }}
    continueOnError: true
    inputs:
      AzureSubscription: $(serviceConnectionName)
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        echo "AppName: $(uiAppName)"
        echo "ResourceGroup: $(resourceGroupName)"
        echo "Registry: $(containerRegistryUrl)"
        echo "Image: $(targetUIImageWithTag)"
        echo "Key: cosmos=$(cosmosKeyValue)"
        echo "Key: aikey=$(aikeyValue)"
        echo "Key: searchkey=$(searchkeyValue)"
        echo "Key: docintellikey=$(docintellikeyValue)"
        echo "Key: apikey=$(apikeyValue)"
        echo "Setting: AOAIPremiumServiceEndpoint=$(azureOpenAiEndPoint)"
        echo "Setting: AOAIStandardServiceEndpoint=$(azureOpenAiEndPoint)"
        echo "Setting: AzureSearchServiceEndpoint=$(searchServiceEndPoint)"
        echo "Setting: AzureStorageAccountEndPoint=$(storageEndpoint)"
        echo "Setting: CosmosDbEndpoint=$(cosmosEndpoint)"
        echo "Setting: UserAssignedManagedIdentityClientId=$(managedIdentityClientId)"
        echo "Setting: APPLICATIONINSIGHTS_CONNECTION_STRING=$(logAnalyticsAppInsightsConnectionString)"
        echo "Setting: AZURE_CLIENT_ID=$(managedIdentityClientId)"
        echo "Setting: AnalysisApiEndpoint=$(apiEndpoint)"

        echo "Setting: profileContainer=$(profileContainer)"
        echo "Setting: AutoBodyDamageAdvisorEndpoint=$(AutoBodyDamageAdvisorEndpointValue)"
        echo "Setting: ColorBlindEndpoint=$(ColorBlindEndpointValue)"

        echo "Updating the container app image and set the settings..."
        az containerapp update -n $(uiAppName) -g $(resourceGroupName) \
        --container-name app --image $(containerRegistryUrl)/$(targetUIImageWithTag) \
        --set-env-vars \
          AOAIPremiumServiceEndpoint="$(azureOpenAiEndPoint)" \
          AOAIStandardServiceEndpoint="$(azureOpenAiEndPoint)" \
          AzureSearchServiceEndpoint="$(searchServiceEndPoint)" \
          AzureStorageAccountEndPoint="$(storageEndpoint)" \
          CosmosDbEndpoint="$(cosmosEndpoint)" \
          UserAssignedManagedIdentityClientId="$(managedIdentityClientId)" \
          APPLICATIONINSIGHTS_CONNECTION_STRING="$(logAnalyticsAppInsightsConnectionString)" \
          AZURE_CLIENT_ID="$(managedIdentityClientId)" \
          AnalysisApiEndpoint="$(apiEndpoint)" \
          AnalysisApiKey="secretRef: 'apikey'" \
          AutoBodyDamageAdvisorApiKey="secretRef: 'apikey'" \
          ColorBlindApiKey="secretRef: 'apikey'" \
          AOAIEmbeddingsDeployment="text-embedding" \
          AOAIPremiumChatGptDeployment="gpt-4o" \
          AOAIStandardChatGptDeployment="gpt-4o" \
          AzureStorageUserUploadContainer="content" \
          CosmosDbDatabaseName="ChatHistory" \
          CosmosDbCollectionName="ChatTurn" \
          DocumentUploadStrategy="AzureNative" \
          EnableDataProtectionBlobKeyStorage="true" \
          ProfileFileName="profile" \
          ShowCollectionsSelection="true" \
          ShowFileUploadSelection="true" \
          UseManagedIdentityResourceAccess='true' \
          ProfileConfigurationBlobStorageContainer='$(profileContainer)' \
          AutoBodyDamageAdvisorEndpoint="$(AutoBodyDamageAdvisorEndpointValue)" \
          ColorBlindEndpoint="$(ColorBlindEndpointValue)"

        echo "Updating the container secrets..."
        az containerapp secret set -n $(uiAppName) -g $(resourceGroupName) --secrets \
          cosmos="$(cosmosKeyValue)" \
          aikey="$(aikeyValue)" \
          searchkey="$(searchkeyValue)" \
          docintellikey="$(docintellikeyValue)" \
          apikey="$(apikeyValue)"
