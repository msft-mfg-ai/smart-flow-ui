# ------------------------------------------------------------------------------------------------------------------------
# Action: Create a package for reuse by others
# ------------------------------------------------------------------------------------------------------------------------
# Before allowing public to pull the image, you need to make sure your GitHub Package is set to public.
# Change the visibility by opening the package settings and setting the package visibility to public.
# Note: in order to do this the org settings for packages must be set to allow them to be made public.
# ------------------------------------------------------------------------------------------------------------------------
# This action relies on a Token which must be setup and given 'write:packages' permissions.
# Set secrets.PUBLISH_PACKAGE_TOKEN to the token value and secrets.PUBLISH_PACKAGE_USER to the owner of the token
# ------------------------------------------------------------------------------------------------------------------------

name: 5 - Create Repo Package UI Docker Image
run-name: 5 - Create Repo Package UI Docker Image by @${{ github.actor }}

on: 
  workflow_dispatch:

  release:
    types: 
      - published

permissions:
  packages: write

# ------------------------------------------------------------------------------------------------------------------------
env:
  ACR_NAME: 'ghcr.io'
  APP_PATH: 'app/SmartFlowUI'
  ACR_APP_NAME: 'smartflowui'

# ------------------------------------------------------------------------------------------------------------------------
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.APP_PATH }}
    permissions: write-all
    outputs:
      IMAGE_NAME: ${{ steps.vars.outputs.IMAGE_NAME }}
      IMAGE_VERSION: ${{ steps.vars.outputs.IMAGE_VERSION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1

      - name: Get repo name
        id: set-repo
        run: echo "REPO_NAME=$(basename ${{ github.repository }})" >> $GITHUB_OUTPUT

      - name: Get the current date and repo name
        id: vars
        run: |
          echo "TAG=$(date +'%Y%m%d%H%M')" >> $GITHUB_OUTPUT
          readonly rundatetime=$(date +'%Y-%m-%dT%H:%M:%SZ')
          echo "rundatetime=$rundatetime" >> $GITHUB_OUTPUT
          readonly rundate=$(date +'%Y.%m.%d')
          echo "rundate=$rundate" >> $GITHUB_OUTPUT
          readonly commitbranch=$(echo ${GITHUB_REF#refs/heads/})
          echo "commitbranch=$commitbranch" >> $GITHUB_OUTPUT
          readonly commitsha=${GITHUB_SHA::6}
          echo "commitsha=$commitsha" >> $GITHUB_OUTPUT

          echo "IMAGE_VERSION=${{ steps.vars.outputs.TAG}}" >> $GITHUB_OUTPUT
          echo "IMAGE_NAME=${{ github.repository_owner }}/${{ steps.set-repo.outputs.REPO_NAME }}/${{ env.ACR_APP_NAME }}:${{ steps.vars.outputs.TAG }}" >> $GITHUB_OUTPUT
          echo "IMAGE_NAME_NO_TAG=${{ github.repository_owner }}/${{ steps.set-repo.outputs.REPO_NAME }}/${{ env.ACR_APP_NAME }}" >> $GITHUB_OUTPUT
  
      - name: Put Build Details in buildinfo.json
        shell: bash
        run: |
          echo -e -n "{\"buildDate\":\"${{ steps.vars.outputs.rundatetime }}\",\"buildNumber\":\"${{ steps.vars.outputs.rundate }}.${{ github.run_number }}\",\"buildId\":\"${{ github.run_id }}.${{ github.run_attempt }}\",\"run_id\":\"${{ github.run_id }}\",\"run_attempt\":\"${{ github.run_attempt }}\",\"run_number\":\"${{ github.run_number }}\",\"branchName\":\"${{ steps.vars.outputs.commitbranch }}\",\"commitHash\":\"${{ steps.vars.outputs.commitsha }}\"}" > ${{ github.workspace }}/${{ env.APP_PATH }}/shared/Shared/Resources/buildinfo.json

      # Uses the `docker/login-action` action to log in to the Container registry using the account that will publish the packages.
      # Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_NAME }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Display Variables and Files
        run: |-
          echo "inputs.ACR_NAME=${{ env.ACR_NAME }}"
          echo "inputs.ACR_APP_NAME=${{ env.ACR_APP_NAME }}"
          echo "inputs.APP_PATH=${{ env.APP_PATH }}"
          echo ""
          echo "set-repo.outputs.REPO_NAME=${{ steps.set-repo.outputs.REPO_NAME }}"
          echo ""
          echo "vars.outputs.TAG=${{ steps.vars.outputs.TAG }}"
          echo "vars.outputs.rundatetime=${{ steps.vars.outputs.rundatetime }}"
          echo "vars.outputs.rundate=${{ steps.vars.outputs.rundate }}"
          echo "vars.outputs.commitbranch=${{ steps.vars.outputs.commitbranch }}"
          echo "vars.outputs.commitsha=${{ steps.vars.outputs.commitsha }}"
          echo "vars.outputs.IMAGE_VERSION=${{ steps.vars.outputs.IMAGE_VERSION }}"
          echo "vars.outputs.IMAGE_NAME=${{ steps.vars.outputs.IMAGE_NAME }}"

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ACR_NAME }}/${{ steps.vars.outputs.IMAGE_NAME_NO_TAG }}
          labels: |
            org.opencontainers.image.title=SmartFlowUI
            org.opencontainers.image.description=UI for the SmartFlow API
            org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/${{ steps.set-repo.outputs.REPO_NAME }}
          tags: |
            type=raw,enable=true,priority=200,prefix=,suffix=,value=${{ steps.vars.outputs.TAG }}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      # - name: Build Docker image
      #   run: docker build -t ${{ env.ACR_APP_NAME }} .

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: '${{ github.workspace }}/${{ inputs.APP_PATH }}'
          push: true
          labels: ${{ steps.meta.outputs.labels }}            
          tags: ${{ steps.meta.outputs.tags }}
