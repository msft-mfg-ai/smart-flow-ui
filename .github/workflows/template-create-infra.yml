# ------------------------------------------------------------------------------------------------------------------------
# Reusable Workflow: Deploy Azure Resources Only
# ------------------------------------------------------------------------------------------------------------------------
name: z_template_deploy_infra
run-name: Deploy Bicep
on:
  workflow_call:
    inputs:
      envCode:
        required: true
        type: string
      templatePath:
        required: false
        type: string
        default: 'infra/bicep/'
      templateFile:
        required: false
        type: string
        default: 'main.bicep'
      parameterFile:
        required: false
        type: string
        default: ''
      parameterFileReplaceTokens:
        required: false
        type: string
        default: 'false'
      deploymentMode:
        required: false
        type: string
        default: 'Incremental'
      runCreateInfra:
        required: false
        default: true
        type: boolean
      deployInResourceGroup:
        required: false
        default: true
        type: boolean
      createResourceGroup:
        description: Create Resource Group?
        type: boolean
        default: false
      publicAccessEnabled:
        description: Public Access Enabled?
        type: boolean
        default: false
      createDnsZones:
        description: Create DNS Zones?
        type: boolean
        default: false
      addRoleAssignments:
        description: Add Role Assignments?
        type: boolean
        default: true

# ------------------------------------------------------------------------------------------------------------------------
jobs:
  deploy:
    name: Deploy Bicep
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.envCode }}
    permissions:
      id-token: write
      contents: read
      actions: read
      pages: write

    # ------------------------------------------------------------------------------------------------------------------------
    # Variables
    # ------------------------------------------------------------------------------------------------------------------------
    env:
      envCode: ${{ inputs.envCode }}
      generatedResourceGroupName: ${{ vars.RESOURCEGROUP_PREFIX }}-${{ inputs.envCode }}
      createResourceGroup: ${{ inputs.createResourceGroup }}
      publicAccessEnabled: ${{ inputs.publicAccessEnabled }}
      createDnsZones: ${{ inputs.createDnsZones }}
      addRoleAssignments: ${{ inputs.addRoleAssignments }}

    # ------------------------------------------------------------------------------------------------------------------------
    # Actions
    # ------------------------------------------------------------------------------------------------------------------------
    steps:
      - name: Checkout Code
        if: ${{ inputs.runCreateInfra }}
        uses: actions/checkout@v4

      - name: Display Variables and Files
        run: |-
          echo "inputs.envCode=${{ inputs.envCode }}"
          echo "env.generatedResourceGroupName=${{ env.generatedResourceGroupName }}"
          echo "vars.APP_NAME=${{ vars.APP_NAME }}"
          echo "vars.APP_PREFIX=${{ vars.APP_PREFIX }}"
          echo "vars.RESOURCEGROUP_PREFIX=${{ vars.RESOURCEGROUP_PREFIX }}"
          echo "vars.RESOURCEGROUP_LOCATION=${{ vars.RESOURCEGROUP_LOCATION }}"

          echo "templatePath=${{ inputs.templatePath }}"
          echo "templateFile=${{ inputs.templateFile }}"
          echo "templateFilePath=${{ inputs.templatePath }}${{ inputs.templateFile }}"
          echo "parameterFile=${{ inputs.parameterFile }}"
          echo "parameterFilePath=$${{ inputs.templatePath }}${{ inputs.parameterFile }}"
          echo "parameterFileReplaceTokens=${{ inputs.parameterFileReplaceTokens }}"
          echo "---------------------------------"
          echo "##[group]All Variables:"
          echo "Environment:"
          echo '${{ toJSON(env) }}'
          echo "Variables:"
          echo '${{ toJSON(vars) }}'
          echo "Secrets:"
          echo '${{ toJSON(secrets) }}'
          echo "Inputs:"
          echo '${{ toJSON(inputs) }}'
          echo "##[endgroup]"
          echo "---------------------------------"
          echo "##[group]Directory of ${{ github.workspace  }}"
          tree -R ${{ github.workspace  }}
          echo "##[endgroup]"
        continue-on-error: true

      - name: Replace Tokens
        if: ${{ inputs.runCreateInfra && inputs.parameterFileReplaceTokens == 'true' }}
        uses: qetza/replacetokens-action@v1
        with:
          sources: '${{ inputs.templatePath }}${{ inputs.parameterFile }}; !local/ => ${{ inputs.parameterFile }}'
          variables: '[${{ toJSON(env) }},${{ toJSON(vars) }},${{ toJSON(secrets) }}]' # use environment & variables & secrets

      - name: Display Param File
        run: |-
          echo "##[group]Contents of ${{ inputs.templatePath }}${{ inputs.parameterFile }}"
          cat ${{ inputs.templatePath }}${{ inputs.parameterFile }}
          echo "##[endgroup]"
        continue-on-error: true

      # https://learn.microsoft.com/en-us/entra/workload-id/workload-identity-federation-create-trust
      - name: OIDC Login to Azure
        if: ${{ inputs.runCreateInfra }}
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.CICD_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      # or - Log into Azure with Secret
      # with:
      #   creds: '{'clientId':'${{ secrets.AZURE_CLIENT_ID }}','clientSecret':'${{ secrets.AZURE_CLIENT_SECRET }}','subscriptionId':'${{ secrets.AZURE_SUBSCRIPTION_ID }}','tenantId':'${{ secrets.AZURE_TENANT_ID }}'}'

      - name: Create Resource Group
        if: ${{ inputs.runCreateInfra && inputs.deployInResourceGroup }}
        run: az group create --name ${{ env.generatedResourceGroupName }} --location ${{ vars.RESOURCEGROUP_LOCATION }} --tags Environment=${{ inputs.envCode }}

      - name: Deploy Azure Resources (Sub))
        uses: azure/arm-deploy@v2
        if: ${{ inputs.runCreateInfra && !inputs.deployInResourceGroup }}
        id: deploy-bicep-sub
        with:
          scope: subscription
          region: ${{ vars.RESOURCEGROUP_LOCATION }}
          deploymentName: ${{ inputs.templateFile }}-sub-${{ vars.RESOURCEGROUP_LOCATION }}
          template: ${{ inputs.templatePath }}${{ inputs.templateFile }}
          parameters: ${{ inputs.templatePath }}${{ inputs.parameterFile }}
          deploymentMode: ${{ inputs.deploymentMode }} # Must be: Incremental | Complete | Validation

      - name: Deploy Azure Resources (RG)
        uses: azure/arm-deploy@v2
        if: ${{ inputs.runCreateInfra && inputs.deployInResourceGroup }}
        id: deploy-bicep-rg
        with:
          scope: resourcegroup
          region: ${{ vars.RESOURCEGROUP_LOCATION }}
          deploymentName: ${{ inputs.templateFile }}-rg-${{ vars.RESOURCEGROUP_LOCATION }}
          resourceGroupName: ${{ env.generatedResourceGroupName }}
          template: ${{ inputs.templatePath }}${{ inputs.templateFile }}
          parameters: ${{ inputs.templatePath }}${{ inputs.parameterFile }}
          deploymentMode: ${{ inputs.deploymentMode }} # Must be: Incremental | Complete | Validation

      # - name: Display Output
      #   if: ${{ inputs.runCreateInfra }}
      #   run: |-
      #     echo ${{ steps.deploy-bicep.outputs.resourceToken }}
      #     echo ${{ steps.deploy-bicep.outputs.hostName }}
      #   continue-on-error: true
      - name: Write summary
        if: ${{ inputs.runCreateInfra }}
        env:
          SUMMARY: |
            # Deployment summary
            - Target Resource Group: ${{ env.generatedResourceGroupName }}
        run: echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true
        # - Link to App URL: [https://${{ steps.deploy-bicep.outputs.hostName }}](https://${{ steps.deploy-bicep.outputs.hostName }})
